@page "/Huacales/Edit/{EntradaId:int}"
@inject HuacalesServices huacalesServices
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Edicion de huacales</PageTitle>

<EditForm Model="huacales" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h5 class="card-title m-0">Modificar Huacales</h5>
            </div>

            <div class="card-body">

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label"><strong>Fecha</strong></label>
                        <input class="form-control" value="@huacales.Fecha.ToLocalTime().ToString("yyyy-MM-dd HH:mm")" readonly />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>EntradaId</strong></label>
                    <InputNumber class="form-control" @bind-Value="huacales.EntradaId" disabled />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Nombre del Cliente</strong></label>
                    <InputText class="form-control" @bind-Value="huacales.NombreCliente" />
                    <ValidationMessage For="() => huacales.NombreCliente" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Cantidad</strong></label>
                    <InputNumber class="form-control" @bind-Value="huacales.Cantidad" />
                    <ValidationMessage For="() => huacales.Cantidad" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Precio</strong></label>
                    <InputNumber class="form-control" @bind-Value="huacales.Precio" />
                    <ValidationMessage For="() => huacales.Precio" />
                </div>
            </div>

            <div class="card-footer d-flex gap-2">
                <a href="/" class="btn btn-secondary">
                    <span class="bi bi-arrow-left me-1"></span> Volver
                </a>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">
                    <span class="bi bi-trash me-1"></span> Eliminar
                </button>
                <button type="submit" class="btn btn-primary">
                    <span class="bi bi-floppy me-1"></span> Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] 
    public int EntradaId { get; set; }
    public EntradasHuacales huacales { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        huacales = await huacalesServices.Buscar(EntradaId) ?? new EntradasHuacales { EntradaId = EntradaId, Fecha = DateTime.UtcNow };
       
    }

    private async Task Modificar()
    {
        var existe = (await huacalesServices.Listar(h => h.NombreCliente == huacales.NombreCliente && h.EntradaId != huacales.EntradaId)).Any();

        if (existe) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ya existe este Cliente.");
            return;
        }
        var ok = await huacalesServices.Guardar(huacales);
        if (ok)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "No se pudo guardar.");
        }
    }

    private async Task Eliminar()
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este cliente?, esta accion no se puede deshacer.");
        if (!confirmado) return;

        if (huacales is null || huacales.EntradaId <= 0) return;
        var ok = await huacalesServices.Eliminar(huacales.EntradaId);
        if (ok)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cliente Eliminado");
            Navigation.NavigateTo("/");
        }
    }
}

