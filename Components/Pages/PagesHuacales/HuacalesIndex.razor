@page "/Huacales/Index"
@inject HuacalesServices huacalesServices
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Gestion de control de huacales</PageTitle>

<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h5 class="card-title">Agregar Clientes</h5>
			<a href="/Huacales/Create" class="btn btn-primary">
				<span class="bi bi-plus-square mt-3"></span> Crear
			</a>
		</div>

		<div class="card-body">
			<div class="row g-3 align-items-end">
				<div class="col-md-2">
					<label class="form-label"><strong>Desde</strong></label>
					<InputDate @bind-Value="FechaDesde" class="form-control" DateFormat="dd/MM/yyyy" />
				</div>

				<div class="col-md-2">
					<label class="form-label"><strong>Hasta</strong></label>
					<InputDate @bind-Value="FechaHasta" class="form-control" DateFormat="dd/MM/yyyy" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Filtrar por</strong></label>
					<InputSelect class="form-select" @bind-Value="Filtro">
						<option value="" selected disabled>Elegir una opcion</option>
						<option value="EntradaId">Id</option>
						<option value="Clientes">Clientes</option>
						<option value="Cantidad">Cantidad</option>
						<option value="Precio">Precio</option>
					</InputSelect>
				</div>

				<div class="col-5" hidden="@(_usaRangoFecha)">
					<label class="form-label"><strong>Busqueda</strong></label>
					<div class="input-group">
						<input class="form-control" @bind="ValorFiltro" @bind:event="oninput" placeholder="Buscar..." />
						<button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
						<button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise" @onclick="Limpiar"></button>
					</div>
				</div>

				<div class="table-responsive mt-3">
					<table class="table table-hover">
						<thead class="table table-striped ">
							<tr>
								<th>Fecha</th>
								<th>ID</th>
								<th>Clientes</th>
								<th>Cantidad de Huacales</th>
								<th>Importe</th>
								<th>Opciones</th>
							</tr>
						</thead>
						<tbody>
						@foreach (var h in ListaDeHuacales)
						{
							<tr>
								<td>@h.Fecha.ToLocalTime().ToString("yyyy-MM-dd")</td>
								<th>@h.EntradaId</th>
								<th>@h.NombreCliente</th>
								<th>@h.Cantidad</th>
								<th>@h.Precio.ToString("C")</th>
								<th>
									<a href="/Huacales/Edit/ @h.EntradaId" class="btn btn-outline-primary bi bi-pencil-square" title="Edictar"></a>
								</th>
							</tr>
						}
						</tbody>
					</table>
				</div>
			</div>
		</div>
		<div class="card-footer space-between text-end">
			<span><strong>Cantidad Total:</strong> @ListaDeHuacales.Sum(x => x.Cantidad)</span>
			<span><strong>Total monto:</strong> @ListaDeHuacales.Sum(x => (x.Cantidad * x.Precio)).ToString("C")</span>
		</div>
	</div>
</div>

@code
{
	public List<EntradasHuacales> ListaDeHuacales { get; set; } = new List<EntradasHuacales>();
	public string Filtro { get; set; } = string.Empty;
	public string ValorFiltro { get; set; } = string.Empty;
	public DateTime? FechaDesde { get; set; }
	public DateTime? FechaHasta { get; set; }


	private bool _usaRangoFecha => Filtro == "Fecha";

	protected override async Task OnInitializedAsync()
	{
		ListaDeHuacales = await huacalesServices.Listar(h => h.EntradaId > 0);
	}

	private async Task Buscar()
	{
		if (string.IsNullOrWhiteSpace(Filtro) && !FechaDesde.HasValue && !FechaHasta.HasValue)
		{
			ListaDeHuacales = await huacalesServices.Listar(h => h.EntradaId > 0);
			return;
		}

		if (FechaDesde.HasValue || FechaHasta.HasValue)
		{
			var datos = await huacalesServices.Listar(h => h.EntradaId > 0);

			if (FechaDesde.HasValue && FechaHasta.HasValue)
			{
				ListaDeHuacales = datos
					.Where(h => h.Fecha.Date >= FechaDesde.Value.Date && h.Fecha.Date <= FechaHasta.Value.Date)
					.ToList();
			}
			else if (FechaDesde.HasValue)
			{
				ListaDeHuacales = datos
					.Where(h => h.Fecha.Date >= FechaDesde.Value.Date)
					.ToList();
			}
			else if (FechaHasta.HasValue)
			{
				ListaDeHuacales = datos
					.Where(h => h.Fecha.Date <= FechaHasta.Value.Date)
					.ToList();
			}
			return;
		}
		if (Filtro == "Clientes" && !string.IsNullOrWhiteSpace(ValorFiltro))
		{
			var v = ValorFiltro.Trim().ToLower();
			ListaDeHuacales = await huacalesServices.Listar(h => (h.NombreCliente ?? "").ToLower().Contains(v));
		}
		else if (Filtro == "EntradaId" && int.TryParse(ValorFiltro, out var EntradaId))
		{
			ListaDeHuacales = await huacalesServices.Listar(p => p.EntradaId == EntradaId);
		}
		else if (Filtro == "Cantidad" && int.TryParse(ValorFiltro, out var Cantidad))
		{
			ListaDeHuacales = await huacalesServices.Listar(p => p.Cantidad == Cantidad);
		}
		else if (Filtro == "Precio" && int.TryParse(ValorFiltro, out var Precio))
		{
			ListaDeHuacales = await huacalesServices.Listar(p => p.Precio == Precio);
		}
		else
		{
			ListaDeHuacales = await huacalesServices.Listar(h => h.EntradaId > 0);
		}
	}
	private async Task Limpiar()
	{
		Filtro = string.Empty;
		ValorFiltro = string.Empty;
		FechaDesde = null;
		FechaHasta = null;
		ListaDeHuacales = await huacalesServices.Listar(h => h.EntradaId > 0);
	}
}